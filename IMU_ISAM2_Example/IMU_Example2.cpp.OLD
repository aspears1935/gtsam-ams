
#include <gtsam/geometry/SimpleCamera.h>
#include <gtsam/inference/Symbol.h>
#include <gtsam/navigation/ImuBias.h>
#include <gtsam/navigation/ImuFactor.h>
#include <gtsam/navigation/Scenario.h>
#include <gtsam/nonlinear/ISAM2.h>
#include <gtsam/slam/BetweenFactor.h>
#include <gtsam/slam/PriorFactor.h>

#include <vector>
#include <chrono>

using namespace std;
using namespace gtsam;
using namespace chrono;

// Shorthand for velocity and pose variables
///using symbol_shorthand::V;
///using symbol_shorthand::X;

const double kGravity = 9.81;

/* ************************************************************************* */
int main(int argc, char* argv[]) {
  auto params = PreintegrationParams::MakeSharedU(kGravity);
  params->setAccelerometerCovariance(I_3x3 * 0.1);
  params->setGyroscopeCovariance(I_3x3 * 0.1);
  params->setIntegrationCovariance(I_3x3 * 0.1);
  params->setUse2ndOrderCoriolis(false);
  params->setOmegaCoriolis(Vector3(0, 0, 0));

  Pose3 delta(Rot3::Rodrigues(-0.1, 0.2, 0.25), Point3(0.05, -0.10, 0.20));

  // Start with a camera on x-axis looking at origin
  double radius = 30;
  const Point3 up(0, 0, 1), target(0, 0, 0);
  const Point3 position(radius, 0, 0);
  const SimpleCamera camera = SimpleCamera::Lookat(position, target, up);
  const auto pose_0 = camera.pose();

  // Now, create a constant-twist scenario that makes the camera orbit the
  // origin
  double angular_velocity = 0, ///M_PI*.01,  // rad/sec
      delta_t = 1.0 / 18;          // makes for 10 degrees per step
  Vector3 angular_velocity_vector(0, -angular_velocity, 0);
  Vector3 linear_velocity_vector(radius * angular_velocity, 0, 0);
  auto scenario = ConstantTwistScenario(angular_velocity_vector,
                                        linear_velocity_vector, pose_0);

  // Create a factor graph
  NonlinearFactorGraph newgraph;

  // Create (incremental) ISAM2 solver
  ISAM2 isam;

  // Create the initial estimate to the solution
  // Intentionally initialize the variables off from the ground truth
  Values initialEstimate, totalEstimate, result;

  Key XKey = Symbol('x', 0);
  Key VKey = Symbol('v', 0);

  //ADDED NEW DYNAMICS FROM IMU_EXAMPLE
  Eigen::Matrix<double,10,1> initial_state = Eigen::Matrix<double,10,1>::Zero();
  // Assemble initial quaternion through gtsam constructor ::quaternion(w,x,y,z);
  Rot3 prior_rotation = Rot3::Quaternion(initial_state(6), initial_state(3),
					 initial_state(4), initial_state(5));
  Point3 prior_point(initial_state.head<3>());
  Pose3 prior_pose(prior_rotation, prior_point);
  Vector3 prior_velocity(initial_state.tail<3>());
  
  
  
  // Add a prior on pose x0. This indirectly specifies where the origin is.
  // 0.1 rad std on roll, pitch, yaw, 30cm std on x,y,z.
  auto noise = noiseModel::Diagonal::Sigmas(
      (Vector(6) << Vector3::Constant(0.1), Vector3::Constant(0.3)).finished());
  newgraph.push_back(PriorFactor<Pose3>(XKey, prior_pose, noise));

  // Add imu priors
  Key biasKey = Symbol('b', 0);
  auto biasnoise = noiseModel::Diagonal::Sigmas(Vector6::Constant(0.1));
  PriorFactor<imuBias::ConstantBias> biasprior(biasKey, imuBias::ConstantBias(),
                                               biasnoise);
  newgraph.push_back(biasprior);
  initialEstimate.insert(biasKey, imuBias::ConstantBias());
  auto velnoise = noiseModel::Diagonal::Sigmas(Vector3(0.1, 0.1, 0.1));

  Vector n_velocity(3);
  ///  n_velocity << 0, angular_velocity * radius, 0;
  n_velocity << 0, 0, 0;
  PriorFactor<Vector3> velprior(VKey, prior_velocity, velnoise);
  newgraph.push_back(velprior);

  initialEstimate.insert(VKey, prior_velocity);

  // IMU preintegrator
  PreintegratedImuMeasurements accum(params);

  // Simulate poses and imu measurements, adding them to the factor graph
  for (size_t i = 0; i < 10000; ++i) {
    double t = i * delta_t;
    if(i % 10 == 0) {
      if (i == 0) {  // First time add two poses
	auto pose_1 = scenario.pose(delta_t);
	//	initialEstimate.insert(XKey, pose_0.compose(delta));
	//	initialEstimate.insert(XKey+1, pose_1.compose(delta));
		initialEstimate.insert(XKey, prior_pose);
		initialEstimate.insert(XKey+1, prior_pose);
      } else if (i >= 20) {  // Add more poses as necessary
	auto pose_i = scenario.pose(t);
	//	initialEstimate.insert(XKey+1, pose_i.compose(delta));
	initialEstimate.insert(XKey+1, prior_pose);
      }
    }
    
    auto start = high_resolution_clock::now(); 
    
    if (i > 0) {

      // Add Bias variables periodically
      ///      if (i % 5 == 0) {
      if (i % 50 == 0) {      
        biasKey++;
        Symbol b1 = biasKey - 1;
        Symbol b2 = biasKey;
        Vector6 covvec;
        covvec << 0.1, 0.1, 0.1, 0.1, 0.1, 0.1;
        auto cov = noiseModel::Diagonal::Variances(covvec);
        auto f = boost::make_shared<BetweenFactor<imuBias::ConstantBias> >(
            b1, b2, imuBias::ConstantBias(), cov);
        newgraph.add(f);
	
        initialEstimate.insert(biasKey, imuBias::ConstantBias());
	}
      // Predict acceleration and gyro measurements in (actual) body frame
      ///      Vector3 measuredAcc = scenario.acceleration_b(t) -
      ///                      scenario.rotation(t).transpose() * params->n_gravity;
      ///Vector3 measuredOmega = scenario.omega_b(t);
      Vector3 measuredAcc = Vector3(0,0,0);
      Vector3 measuredOmega = Vector3(0,0,0);
      accum.integrateMeasurement(measuredAcc, measuredOmega, delta_t);
      cout << "i=" << i << endl;
      if (i % 10 == 0) {
	// Add Imu Factor
	XKey++;
	VKey++;
	ImuFactor imufac(XKey-1, VKey-1, XKey, VKey, biasKey, accum);
	newgraph.add(imufac);
		
	// insert new velocity, which is wrong
	initialEstimate.insert(VKey, n_velocity);
	accum.resetIntegration();
      }
    }

    if (i % 10 == 0) {      
      // Incremental solution
      isam.update(newgraph, initialEstimate);
      result = isam.calculateEstimate();
      newgraph = NonlinearFactorGraph();
      initialEstimate.clear();

      auto stop = high_resolution_clock::now();
      auto duration = duration_cast<microseconds>(stop - start);
      cout << "duration=" << duration.count() << endl;
    }
    
  }
  //  GTSAM_PRINT(result);
  return 0;
}
/* ************************************************************************* */
